fct_grubbs <- function(x, significance = 0.95) {
stopifnot(
is.vector(x),
length(x) > 3 & length(x) < 30,
is.numeric(significance),
isTRUE(significance > 0 & significance < 1)
)
outvalues <- NULL
test <- x
gtest10 <- outliers::grubbs.test(test, type = 10)
gtest11 <- outliers::grubbs.test(test, type = 11)
gtest20 <- outliers::grubbs.test(test, type = 20)
gtest_list <- list(gtest10 = gtest10, gtest11 = gtest11, gtest20 = gtest20)
grubbs_result <- gtest_list[[which.min(sapply(gtest_list, function(x) x$p.value))]]
print(as.numeric(strsplit(grubbs_result$alternative," ")[[1]][3]))
pv <- grubbs_result$p.value
pvmin <- pv
gmax <- grubbs_result$statistic[[1]]
# the test is repeated until no outliers are found at the required significance level
while(pv < 1-significance) {
numvalues <- as.numeric(strsplit(grubbs_result$alternative, " ")[[1]])
outvalues <- c(outvalues, numvalues[!is.na(numvalues)])
test <- x[!x %in% outvalues]
gtest10 <- outliers::grubbs.test(test, type = 10)
gtest11 <- outliers::grubbs.test(test, type = 11)
gtest20 <- outliers::grubbs.test(test, type = 20)
gtest_list <- list(gtest10 = gtest10, gtest11 = gtest11, gtest20 = gtest20)
grubbs_result <- gtest_list[[which.min(sapply(gtest_list, function(x) x$p.value))]]
pv <- grubbs_result$p.value
g <- grubbs_result$statistic[[1]]
gmax <- max(c(gmax, g))
pvmin <- min(c(pvmin, pv)) # minimum p-values for reporting
}
gtext <- sprintf("%.3f", gmax)
pvtext <- sprintf("%.4f", pvmin)
result <- if (length(outvalues) == 0) {
paste0("nessun valore anomalo (G = ", gtext, ", p-value = ", pvtext, ")")
} else if (length(outvalues) == 1) {
paste0(length(outvalues), " valore anomalo (", outvalues,
", G = ", gtext, ", p-value = ", pvtext, ")")
} else {
paste0(length(outvalues), " valori anomali (",
paste0(outvalues, collapse = ", "), " G = ", gtext, ", p-value = ",
pvtext, ")")
}
list(G = gmax,
pvalue = pvmin,
result = result)
}
fct_grubbs(c(a, 4, -4), significance = 0.95)
?is.numeric
?as.numeric
b <- as.numeric(levels(strsplit(outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative, " ")[[1]]))
b
b <- as.numeric(strsplit(outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative, " ")[[1]])
b
b <- as.numeric(gsub("\\D", "", outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative)[[1]])
b
gsub("\\D", "", outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative)
outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative
gsub("\\d", "", outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative)
gsub("[^0-9.-]+", "", outliers::grubbs.test(c(a, 4, -4), type = 20)$alternative)
gsub("[^0-9.-]+", "", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)
gsub("[^0-9.-]+", "", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("![^0-9.-]+", "", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("[^0-9.-]", "", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub(".*?([0-9]+).*", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub(".*?([0-9.-]+).*", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("([0-9.-]+).*", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("[0-9.-]*", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("[0-9.-]+*", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)[[1]]
gsub("[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)
gsub("[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative[[1]])
gsub("[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)
gsub(".[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)
gsub("[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 10)$alternative)
gsub("[^0-9.-]+", "\\1", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)
gsub("[^0-9.-]+", "\\1", strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, ""))
strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, "")
strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, " ")
gsub("[:num]", "", strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, " "))
gsub("[^0-9]", "", strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, " "))
gsub("[^0-9.-]+", "", strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, " "))
gsub("[^0-9.-]+", " ", strsplit(outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative, " "))
gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative)
strplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative), " ")
strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative), " ")
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative), " "))
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4, -4), type = 11)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 11)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 11)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, 4.0001), type = 11)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, 4.0001), type = 20)$alternative), " ")[[1]])
strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, 4.0001), type = 20)$alternative), " ")[[1]]
gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, 4.0001), type = 20)$alternative)[[1]]
outliers::grubbs.test(c(a, 4.21545, 4.0001), type = 20)$alternative
strsplit(gsub("[^0-9.-]+", "", outliers::grubbs.test(c(a, 4.21545, 4.0001), type = 20)$alternative), " ")[[1]]
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 11)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), "")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", "_", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", "_", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), "_")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
as.numeric(strsplit(gsub("[^0-9.-]+", " ", outliers::grubbs.test(c(a, 4.21545, -4.0001), type = 20)$alternative), " ")[[1]])
fct_grubbs <- function(x, significance = 0.95) {
stopifnot(
is.vector(x),
length(x) > 3 & length(x) < 30,
is.numeric(significance),
isTRUE(significance > 0 & significance < 1)
)
outvalues <- NULL
test <- x
gtest10 <- outliers::grubbs.test(test, type = 10)
gtest11 <- outliers::grubbs.test(test, type = 11)
gtest20 <- outliers::grubbs.test(test, type = 20)
gtest_list <- list(gtest10 = gtest10, gtest11 = gtest11, gtest20 = gtest20)
grubbs_result <- gtest_list[[which.min(sapply(gtest_list, function(x) x$p.value))]]
print(as.numeric(strsplit(grubbs_result$alternative," ")[[1]][3]))
pv <- grubbs_result$p.value
pvmin <- pv
gmax <- grubbs_result$statistic[[1]]
# the test is repeated until no outliers are found at the required significance level
while(pv < 1-significance) {
numvalues <- as.numeric(strsplit(gsub("[^0-9.-]+", " ", grubbs_result$alternative), " ")[[1]])
outvalues <- c(outvalues, numvalues[!is.na(numvalues)])
test <- x[!x %in% outvalues]
gtest10 <- outliers::grubbs.test(test, type = 10)
gtest11 <- outliers::grubbs.test(test, type = 11)
gtest20 <- outliers::grubbs.test(test, type = 20)
gtest_list <- list(gtest10 = gtest10, gtest11 = gtest11, gtest20 = gtest20)
grubbs_result <- gtest_list[[which.min(sapply(gtest_list, function(x) x$p.value))]]
pv <- grubbs_result$p.value
g <- grubbs_result$statistic[[1]]
gmax <- max(c(gmax, g))
pvmin <- min(c(pvmin, pv)) # minimum p-values for reporting
}
gtext <- sprintf("%.3f", gmax)
pvtext <- sprintf("%.4f", pvmin)
result <- if (length(outvalues) == 0) {
paste0("nessun valore anomalo (G = ", gtext, ", p-value = ", pvtext, ")")
} else if (length(outvalues) == 1) {
paste0(length(outvalues), " valore anomalo (", outvalues,
", G = ", gtext, ", p-value = ", pvtext, ")")
} else {
paste0(length(outvalues), " valori anomali (",
paste0(outvalues, collapse = ", "), ", G = ", gtext, ", p-value = ",
pvtext, ")")
}
list(G = gmax,
pvalue = pvmin,
result = result)
}
fct_grubbs(c(a, 4, -4), significance = 0.95)
outliers::grubbs.test(c(a, -4, 4))
outliers::grubbs.test(c(a, -4, 4), type = 10)
outliers::grubbs.test(c(a, -4, 4), type = 11)
outliers::grubbs.test(c(a, -4, 4), type = 12)
outliers::grubbs.test(c(a, -4, 4), type = 20)
fct_grubbs(c(a, 4, -4), significance = 0.95)
fct_grubbs(c(a, 4), significance = 0.95)
outliers::grubbs.test(c(a, 4), type = 10)
boxplot(a)
boxplot(c(a, 4))
outliers::grubbs.test(c(a), type = 10)
outliers::grubbs.test(c(a), type = 11)
outliers::grubbs.test(c(a), type = 12)
fct_grubbs(c(a), significance = 0.95)
fct_grubbs(c(a, 4, 5), significance = 0.95)
outliers::grubbs.test(c(a, 4, 5), type = 12)
outliers::grubbs.test(c(a, 4, 5), type = 11)
outliers::grubbs.test(c(a, 4, 5), type = 10)
outliers::grubbs.test(c(a, 4, 5), type = 20)
fct_grubbs(c(a, 4, 5), significance = 0.99)
fct_grubbs(c(a, 4, 6), significance = 0.99)
boxplot(c(a, 4, 6))
fct_grubbs(c(a, -4, -6), significance = 0.99)
fct_grubbs(c(a, -4, -6), significance = 0.95)
outliers::grubbs.test(c(a, 4, 6), type = 10)
outliers::grubbs.test(c(a, 4, 6), type = 11)
outliers::grubbs.test(c(a, 4, 6, 9), type = 11)
outliers::grubbs.test(c(a, 4, 6, 9), type = 10)
outliers::grubbs.test(c(a, 4, 6, 9), type = 20)
fct_grubbs(c(a, -4, -6, 9), significance = 0.95)
fct_grubbs(c(a, 4, 6, 9), significance = 0.95)
fct_grubbs(c(a, 4, 6, 9), significance = 0.99)
#' Mass spectrometer measurements on a Uranium isotope
#'
#' A dataset containing the results expressed counts per seconds for mass spectrometer measurements on a Uranium isotope.
#' The variable are as follows:
#'
#' @format a vector with 8 numerical values:
#'
#' @name uranium_cps
#' @docType data
#' @author Gary L. Tietjen
#' @author Roger H. Moore
#' @source Some Grubbs-Type Statistics for the Detection of Several Outliers.
#'  Technometrics, 14(3), 1972, pp. 583-597.
#'  Also available at
#'  \url{https://www.itl.nist.gov/div898/handbook/eda/section3/eda35h1.htm}.
#' @keywords data
uranium_cps <- c(199.31, 199.53, 200.19, 200.82, 201.92, 201.95, 202.18, 245.57)
usethis::use_data(uranium_cps, overwrite = TRUE)
library(comparat)
fct_grubbs(uranium_cps)
outliers::grubbs.test(uranium_cps)
library(comparat)
fct_grubbs(uranium_cps)
uranium_cps
fct_grubbs(uranium_cps[1:6])
outliers::grubbs.test(uranium_cps)
outliers::grubbs.test(uranium_cps[1:6])
outliers::grubbs.test(uranium_cps[1:7])
outliers::grubbs.test(uranium_cps[1:7], type = 11)
outliers::grubbs.test(uranium_cps[1:8], type = 11)
outliers::grubbs.test(uranium_cps, type = 11)
outliers::grubbs.test(uranium_cps, type = 10)
fct_grubbs(uranium_cps)
comparat::fct_grubbs(uranium_cps)
comparat::fct_grubbs(uranium_cps[1:6])
comparat::fct_grubbs(uranium_cps[1:7])
library(comparat)
library(comparat)
library(comparat)
runApp()
shiny::runApp()
fct_grubbs(tomato_yields)
tomato_yields
fct_grubbs(tomato_yields[1:5])
fct_grubbs(tomato_yields[1:5,])
fct_grubbs(tomato_yields[1:5,3])
tomato_yields[1:5,3]
tomato_yields[[1:5,3]]
as.vector(tomato_yields[1:5,3])
tomato_yields$pounds[1:5]
fct_grubbs(tomato_yields$pounds[1:5])
fct_grubbs(tomato_yields$pounds[6:11])
library(comparat)
library(comparat)
shiny::runApp()
library(comparat)
shiny::runApp()
library(comparat)
library(comparat)
shiny::runApp()
?ifelse
?radiobuttons
??radiobuttons
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
golem::add_module(name = "01_aim", with_test = TRUE) # Name of the module
devtools::load_all(".")
shiny::runApp()
?actionButton
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
?icon
icon("square-right")
icon("right")
icon("square")
icon("square-right-arrow")
icon("right-arrow")
icon("arrow-right")
icon("square-arrow-right")
icon("square-caret-right")
icon("right")
icon("right-long")
icon("right")
icon("circle-right")
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
devtools::load_all(".")
shiny::runApp()
?renderPrint
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
testServer(
mod_aim01_server,
# Add here your module params
args = list()
, {
ns <- session$ns
expect_true(
inherits(ns, "function")
)
expect_true(
grepl(id, ns(""))
)
expect_true(
grepl("test", ns("test"))
)
session$setInputs(aim = "Confrontare due serie di dati complete")
expect_true(input$aim == "2samples")
# - If ever your input updates a reactiveValues
# - Note that this reactiveValues must be passed
# - to the testServer function via args = list()
# expect_true(r$x == 1)
# - Testing output
# expect_true(inherits(output$tbl$html, "html"))
})
library(shiny)
library(testthat)
testServer(
mod_aim01_server,
# Add here your module params
args = list()
, {
ns <- session$ns
expect_true(
inherits(ns, "function")
)
expect_true(
grepl(id, ns(""))
)
expect_true(
grepl("test", ns("test"))
)
session$setInputs(aim = "Confrontare due serie di dati complete")
expect_true(input$aim == "2samples")
# - If ever your input updates a reactiveValues
# - Note that this reactiveValues must be passed
# - to the testServer function via args = list()
# expect_true(r$x == 1)
# - Testing output
# expect_true(inherits(output$tbl$html, "html"))
})
devtools::load_all(".")
testServer(
mod_aim01_server,
# Add here your module params
args = list()
, {
ns <- session$ns
expect_true(
inherits(ns, "function")
)
expect_true(
grepl(id, ns(""))
)
expect_true(
grepl("test", ns("test"))
)
session$setInputs(aim = "Confrontare due serie di dati complete")
expect_true(input$aim == "2samples")
# - If ever your input updates a reactiveValues
# - Note that this reactiveValues must be passed
# - to the testServer function via args = list()
# expect_true(r$x == 1)
# - Testing output
# expect_true(inherits(output$tbl$html, "html"))
})
devtools::load_all(".")
shiny::runApp()
?includeMarkdown
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
system.file("rmd", "example_2samples.html", package = "comparat")
devtools::load_all(".")
shiny::runApp()
?reactiveValues
?reactiveVal
devtools::load_all(".")
shiny::runApp()
reactiveVal("example_2samples.html")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
