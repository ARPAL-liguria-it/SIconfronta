# remove the value with the maximum deviate from the dataset
df <- df[-which.max(df$deviate),]
l <- l + 1
}
df_result$l <- 0:m
df_result$lambda <- lamba_l(n, df_result$l, significance = 0.95)
df_result$outlier <- ifelse(R > lambda, TRUE, FALSE)
df_result[, c("l", "I", "R", "lambda", "outlier")]
df_result
}
fct_gesd(sample(x))
fct_gesd <- function(values,
significance = 0.95,
m = round(length(values)/3, 0)) {
stopifnot(
is.vector(values),
length(values) >= 5,
is.numeric(significance),
significance >= 0.90 & significance < 1,
is.numeric(m),
m <= length(values)
)
# function for calculating the critical lambda value
lamba_l <- function(n_values,
l_removed,
significance = 0.95) {
alfa <- 1 - significance
n_l <- n_values - l_removed
p <- (1 - alfa/2)^(1/(n_l))
tp <- qt(p, n_l - 2)
((n_l - 1) * tp) / sqrt((n_l - 2 + tp^2) * (n_l))
}
n <- length(values)
l <- 0
df <- data.frame(I = values)
df_result <- data.frame()
while (l <= m) {
# mean and std.deviation
x_mean <- mean(df$I)
x_sd <- sd(df$I)
# deviates from the mean
df$deviate <- abs(df$I - x_mean)
# maximum studentized deviate
df$R <- max(df$deviate)/x_sd
# attach the maximum stuntized deviate to the final results dataset
df_result <- rbind(df_result, df[which.max(df$deviate),])
# remove the value with the maximum deviate from the dataset
df <- df[-which.max(df$deviate),]
l <- l + 1
}
df_result$l <- 0:m
df_result$lambda <- lamba_l(n, df_result$l, significance = 0.95)
df_result$outlier <- ifelse(df_result$R > df_result$lambda, TRUE, FALSE)
df_result[, c("l", "I", "R", "lambda", "outlier")]
df_result
}
fct_gesd(sample(x))
fct_gesd <- function(values,
significance = 0.95,
m = round(length(values)/3, 0)) {
stopifnot(
is.vector(values),
length(values) >= 5,
is.numeric(significance),
significance >= 0.90 & significance < 1,
is.numeric(m),
m <= length(values)
)
# function for calculating the critical lambda value
lamba_l <- function(n_values,
l_removed,
significance = 0.95) {
alfa <- 1 - significance
n_l <- n_values - l_removed
p <- (1 - alfa/2)^(1/(n_l))
tp <- qt(p, n_l - 2)
((n_l - 1) * tp) / sqrt((n_l - 2 + tp^2) * (n_l))
}
n <- length(values)
l <- 0
df <- data.frame(I = values)
df_result <- data.frame()
while (l <= m) {
# mean and std.deviation
x_mean <- mean(df$I)
x_sd <- sd(df$I)
# deviates from the mean
df$deviate <- abs(df$I - x_mean)
# maximum studentized deviate
df$R <- max(df$deviate)/x_sd
# attach the maximum stuntized deviate to the final results dataset
df_result <- rbind(df_result, df[which.max(df$deviate),])
# remove the value with the maximum deviate from the dataset
df <- df[-which.max(df$deviate),]
l <- l + 1
}
df_result$l <- 0:m
df_result$lambda <- lamba_l(n, df_result$l, significance = 0.95)
df_result$outlier <- ifelse(df_result$R > df_result$lambda, TRUE, FALSE)
df_result <- df_result[, c("l", "I", "R", "lambda", "outlier")]
df_result
}
fct_gesd(sample(x))
fct_gesd(sample(x), significance = 0.99)
fct_gesd <- function(values,
significance = 0.95,
m = round(length(values)/3, 0)) {
stopifnot(
is.vector(values),
length(values) >= 5,
is.numeric(significance),
significance >= 0.90 & significance < 1,
is.numeric(m),
m <= length(values)
)
# function for calculating the critical lambda value
lamba_l <- function(n_values,
l_removed,
significance) {
alfa <- 1 - significance
n_l <- n_values - l_removed
p <- (1 - alfa/2)^(1/(n_l))
tp <- qt(p, n_l - 2)
((n_l - 1) * tp) / sqrt((n_l - 2 + tp^2) * (n_l))
}
n <- length(values)
l <- 0
df <- data.frame(I = values)
df_result <- data.frame()
while (l <= m) {
# mean and std.deviation
x_mean <- mean(df$I)
x_sd <- sd(df$I)
# deviates from the mean
df$deviate <- abs(df$I - x_mean)
# maximum studentized deviate
df$R <- max(df$deviate)/x_sd
# attach the maximum stuntized deviate to the final results dataset
df_result <- rbind(df_result, df[which.max(df$deviate),])
# remove the value with the maximum deviate from the dataset
df <- df[-which.max(df$deviate),]
l <- l + 1
}
df_result$l <- 0:m
df_result$lambda <- lamba_l(n, df_result$l, significance = 0.95)
df_result$outlier <- ifelse(df_result$R > df_result$lambda, TRUE, FALSE)
df_result <- df_result[, c("l", "I", "R", "lambda", "outlier")]
df_result
}
fct_gesd(sample(x), significance = 0.99)
fct_gesd(sample(x), significance = 0.95)
fct_gesd <- function(values,
significance = 0.95,
m = round(length(values)/3, 0)) {
stopifnot(
is.vector(values),
length(values) >= 5,
is.numeric(significance),
significance >= 0.90 & significance < 1,
is.numeric(m),
m <= length(values)
)
# function for calculating the critical lambda value
lamba_l <- function(n_values,
l_removed,
signif) {
alfa <- 1 - significance
n_l <- n_values - l_removed
p <- (1 - alfa/2)^(1/(n_l))
tp <- qt(p, n_l - 2)
((n_l - 1) * tp) / sqrt((n_l - 2 + tp^2) * (n_l))
}
n <- length(values)
l <- 0
df <- data.frame(I = values)
df_result <- data.frame()
while (l <= m) {
# mean and std.deviation
x_mean <- mean(df$I)
x_sd <- sd(df$I)
# deviates from the mean
df$deviate <- abs(df$I - x_mean)
# maximum studentized deviate
df$R <- max(df$deviate)/x_sd
# attach the maximum stuntized deviate to the final results dataset
df_result <- rbind(df_result, df[which.max(df$deviate),])
# remove the value with the maximum deviate from the dataset
df <- df[-which.max(df$deviate),]
l <- l + 1
}
df_result$l <- 0:m
df_result$lambda <- lamba_l(n, df_result$l, signif = significance)
df_result$outlier <- ifelse(df_result$R > df_result$lambda, TRUE, FALSE)
df_result <- df_result[, c("l", "I", "R", "lambda", "outlier")]
df_result
}
fct_gesd(sample(x), significance = 0.95)
fct_gesd(sample(x), significance = 0.99)
x
str(a)
#' Observations from UNI ISO 16269-4:2019 - Section 4.3.2
#'
#' A dataset containing 20 observations for outliers detection.
#' The variable are as follows:
#'
#' @format a vector with 20 numerical values:
#'
#' @name uniiso_16269_4_432
#' @docType data
#' @author ISO/TC 69 - Applications of statistical methods
#' @source UNI ISO 16269-4:2019 - Statistical interpretation of data - Part 4:
#'  Detection and treatment of outliers. Section 4.3.2.
#'  \url{https://store.uni.com/uni-iso-16269-4-2019}.
#' @keywords data
uniiso_16269_4_432 <- c(-2.21, -1.84, -0.95, -0.91, -0.36,
-0.19, -0.11, -0.10, 0.18, 0.30,
0.43, 0.51, 0.64, 0.67, 0.93,
1.22, 1.35, 1.73,5.80, 12.60)
usethis::use_data(uniiso_16269_4_432, overwrite = TRUE)
fct_gesd(uranium_cps)
fct_gesd(uranium_cps, 0.99)
fct_gesd(uranium_cps, 0.99)$outlier
fct_gesd(uranium_cps, 0.99)[is.TRUE(which(fct_gesd(uranium_cps, 0.99)$outlier))]
fct_gesd(uranium_cps, 0.99)[isTRUE(which(fct_gesd(uranium_cps, 0.99)$outlier))]
fct_gesd(uranium_cps, 0.99)[which(isTRUE(fct_gesd(uranium_cps, 0.99)$outlier))]
fct_gesd(uranium_cps, 0.99)[isTRUE(fct_gesd(uranium_cps, 0.99)$outlier)]
isTRUE(fct_gesd(uranium_cps, 0.99)$outlier)
fct_gesd(uranium_cps, 0.99)[which(fct_gesd(uranium_cps, 0.99)$outlier== TRUE)]
fct_gesd(uranium_cps, 0.99)[which(fct_gesd(uranium_cps, 0.99)$outlier== TRUE),]
fct_gesd(uranium_cps, 0.99)$I[which(fct_gesd(uranium_cps, 0.99)$outlier== TRUE),]
fct_gesd(uranium_cps, 0.99)$I[which(fct_gesd(uranium_cps, 0.99)$outlier== TRUE)]
fct_gesd(uniiso_16269_4_432)
fct_gesd(uniiso_16269_4_432)$I[1:3]
fct_gesd(uniiso_16269_4_432)$R[1:3] %>% round(4)
library(magrittr)
fct_gesd(uniiso_16269_4_432)$R[1:3] %>% round(4)
fct_gesd(uniiso_16269_4_432)$lambda[1:3] %>% round(4)
fct_gesd(uniiso_16269_4_432)$outlier[1:3]
dim(c)
a
a[a>10]
str(a[a>10])
dim(a[a>10])
?paste
paste(1:12, collapse = ",")
paste(1:12, collapse = " ,")
paste(1:12, collapse = ", ")
library(comparat)
run_app()
library(comparat)
run_app()
library(comparat)
run_app()
fread("C:\Users\andrea.bazzano\Downloads/esempio_test.csv")
fread("\Users\andrea.bazzano\Downloads/esempio_test.csv")
fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo"]
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte"]
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore]
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore] %>% fct_gesd()
fct_gesd <- function(values,
significance = 0.95,
m = round(length(values)/3, 0)) {
stopifnot(
is.vector(values),
length(values) >= 5,
is.numeric(significance),
significance >= 0.90 & significance < 1,
is.numeric(m),
m <= length(values)
)
# function for calculating the critical lambda value
lamba_l <- function(n_values,
l_removed,
signif) {
alfa <- 1 - significance
n_l <- n_values - l_removed
p <- (1 - alfa/2)^(1/(n_l))
tp <- qt(p, n_l - 2)
((n_l - 1) * tp) / sqrt((n_l - 2 + tp^2) * (n_l))
}
n <- length(values)
l <- 0
df <- data.frame(I = values)
df_result <- data.frame()
while (l <= m) {
# mean and std.deviation
x_mean <- mean(df$I)
x_sd <- sd(df$I)
# deviates from the mean
df$deviate <- abs(df$I - x_mean)
# maximum studentized deviate
df$R <- max(df$deviate)/x_sd
# attach the maximum stuntized deviate to the final results dataset
df_result <- rbind(df_result, df[which.max(df$deviate),])
# remove the value with the maximum deviate from the dataset
df <- df[-which.max(df$deviate),]
l <- l + 1
}
df_result$lambda <- lamba_l(n, df_result$l, signif = significance)
df_result$outlier <- ifelse(df_result$R > df_result$lambda, TRUE, FALSE)
df_result <- df_result[, c("I", "R", "lambda", "outlier")]
df_result
}
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore] %>% fct_gesd
library(comparat)
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore] %>% fct_gesd
devtools::load_all(".")
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore] %>% fct_gesd
devtools::load_all(".")
data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore] %>% fct_gesd
library(comparat)
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
a <- data.table::fread("\\Users\\andrea.bazzano\\Downloads/esempio_test.csv")[analita == "primo" & gruppo == "monte", valore] %>% fct_gesd
a
a[which(a$outlier == TRUE),]
dim(a[which(a$outlier == TRUE),])
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
run_app()
devtools::load_all(".")
run_app()
library(comparat)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(comparat)
devtools::load_all(".")
devtools::load_all(".")
run_app()
run_app()
devtools::load_all(".")
devtools::load_all(".")
mtcars
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \(x) length() |> max() )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \(x) length(x) |> max() )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \(x) length(x) |> max(x) )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \(x) {length(x) |> max(x)} )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \(x){length(x) |> max(x)} )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \function(x){length(x) |> max(x)} )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = \function(x) length(x) )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = function(x) length(x) )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = length() )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = length )
aggregate(formula = mpg ~ gear, data = mtcars, FUN = max)
?aggregate
aggregate(x = mtcars$mpg , by = mtcars$wt, FUN = max)
aggregate(x = mtcars$mpg , by = factor(mtcars$wt), FUN = max)
aggregate(x = mtcars$mpg , by = list(mtcars$wt), FUN = max)
aggregate(x = mtcars$mpg , by = list(mtcars$gear), FUN = max)
aggregate(x = mtcars$mpg , by = mtcars$gear, FUN = max)
aggregate(x = mtcars$mpg , by = list(mtcars$gear), FUN = \(x) length(x))
aggregate(x = mtcars$mpg , by = list(mtcars$gear), FUN = \(x) length(x)) |> max()
aggregate(x = mtcars$mpg , by = list(mtcars$gear), FUN = \(x) unique(x) |> length()) |> max()
aggregate(x = mtcars$mpg , by = list(mtcars$gear), FUN = \(x) unique(x) |> length())
aggregate(x = mtcars[[mpg]] , by = list(mtcars$gear), FUN = \(x) unique(x) |> length())
aggregate(x = mtcars[["mpg"]] , by = list(mtcars$gear), FUN = \(x) unique(x) |> length())
aggregate(x = mtcars[["mpg"]] , by = list(mtcars[["gear"]]), FUN = \(x) unique(x) |> length())
devtools::load_all(".")
run_app()
load("~/comparat/data/tomato_yields.rda")
tomato_yields
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length())
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length()) |> max()
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length()) |> max(x)
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length()) |> \(x) x$x
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length()) |> \(data) data$x
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length()) |> \(data) max(data$x)
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length())$x
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length())$x |> max
aggregate(x = tomato_yields[["parameter"]] , by = list(tomato_yields[["fertilizer"]]), FUN = \(x) unique(x) |> length())$x |> max()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
a <- TRUE
b <- TRUE
c <- TRUE
e <- FALSE
isTRUE(c(a,b,c,e))
isTRUE(c(a,b,c))
isTRUE((a,b,c))
isTRUE(a,b,c)
isTRUE(a,)
isTRUE(a)
isTRUE(a & b & c))
isTRUE(a & b & c)
isTRUE(a & b & c & e)
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
??setInputs
??session$setInputs
??session
?session
devtools::load_all(".")
class(reactiveValues())
?expect_error
devtools::load_all(".")
??shinyloadtest
run_app()
run_app()
run_app()
run_app()
reactiveVal(TRUE)
reactiveVal(TRUE) & TRUE
a <- reactiveVal(TRUE)
a
a & TRUE
a[] & TRUE
a
a[1]
str(a)
unname(a)
unname(a) & TRUE
unlist(a) & TRUE
unclass(a) & TRUE
a
attr(a)
attr(a. "impl")
a.impl
a()
a <- reactiveValues(TRUE)
a <- reactiveValues(a = TRUE)
a
a$a
a <- fread("data-raw/test_2values_unc.csv")
a
aggregate(a[["valore"]], by = list(a[["gruppo"]], a[["analita"]]))
aggregate(a[["valore"]], by = list(a[["gruppo"]], a[["analita"]]), FUN = \(x) length())
aggregate(a[["valore"]], by = list(a[["gruppo"]], a[["analita"]]), FUN = \(x) length(x))
b <- fread("data-raw/test_2samples_wronggroups.csv")
aggregate(b[["valore"]], by = list(b[["gruppo"]], b[["analita"]]), FUN = \(x) length(x))
aggregate(a[["valore"]], by = list(a[["gruppo"]], a[["analita"]]), FUN = \(x) length(x))$x |> max()
aggregate(a[["valore"]], by = list(a[["gruppo"]], a[["analita"]]), FUN = length)$x |> max()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
