fct_shapiro
list(name = x,
W = shapiro_output$W,
pvalue = shapiro_output$pvalue,
result = shapiro_output$result)
})[[2]]$result
devtools::load_all(".")
run_app()
shapiro_text <- "<b>Gruppo</b> %s: %s (W = %.3f, <i>p</i>-value = %.4f </br>"
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
})
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% unlist
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% unlist %>% paste
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% unlist %>% unlist()
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% unlist %>% paste
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% lapply(paste)
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% lapply(function(x) unlist(x) %>% paste)
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
})
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
})
a <- c("a", "b", "c")
paste0(a)
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% sapply(paste)
lapply(levels(tomato_yields$fertilizer), function(x) {
shapiro_output <- tomato_yields[fertilizer == x, pounds] %>%
fct_shapiro
sprintf(shapiro_text,
x,
shapiro_output$result,
shapiro_output$W,
shapiro_output$pvalue)
}) %>% unlist %>% sapply(paste)
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
paste("a", list("c", "d"))
?paste
paste("a", list("c", "d"), recycle0 = TRUE)
paste("a", c("c", "d"), recycle0 = TRUE)
paste("a", paste(c("c", "d")))
paste(c("c", "d")))
paste(c("c", "d"))
paste0(c("c", "d"))
paste(c("c", "d"), collapse = "")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
setdiff(5, 7)
?setdiff
setdiff(c(5,7), 5)
setdiff(7, 7)
5 %in% 1:10
1:10 %in% 5
1:10 %in% NA
?inherits()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::test_coverage()
rowsummary(tomato_yields, "pounds", "fertilizer")
devtools::test_coverage()
devtools::load_all(".")
devtools::test_coverage()
golem::add_module(name = "save", with_test = TRUE) # Name of the module
sapply(list(c("a", "b"), list(NULL))
)
sapply(list(c("a", "b"), function(x) list(NULL)))
sapply(list(c("a", "b")), function(x) list(NULL))
sapply(list("a", "b"), function(x) list(NULL))
a<-sapply(list("a", "b"), function(x) list(NULL))
a
a[["a"]]
a[["b"]]
a[["c"]]
a<-sapply(list("a", "b"), function(x) list(name = x))
a
a$name
a$name[2]
a$name[3]
a$name[1]
a[1]$name
a[2]$name
str(a)
a[["a"]]
a[[a]]
a["a"]
a[a]
lapply(a, function(x) x$name)
lapply(a, function(x) x)
a<-sapply(list("a", "b"), function(x) list(x$name = x))
a<-sapply(list("a", "b"), function(x) list(x$name))
a<-sapply(list("a", "b"), function(x) x)
a
a<-sapply(list("a", "b"), function(x) list(ciao = NULL))
a
a<-sapply(list("a", "b"), function(x) list(ciao = NULL, miao = NULL))
a
a<-sapply(list("a", "b"), function(x) list("ciao" = NULL, "miao" = NULL))
a
a<-sapply(list("a"), function(x) list("ciao" = NULL, "miao" = NULL))
a
a<-sapply(list("a", "b"), function(x) list("ciao" = NULL, "miao" = NULL), simplify = FALSE)
a
a[["a"]]
a[["a"]]$ciao
rm(a)
a[["a"]]$ciao
a <- list()
a[["a"]]$ciao
rm(a)
a <- list()
a[["a"]]$ciao
a
a[["a"]]$ciao <- "pippo"
a
a[["a"]]$ciao <- list()
a
a[["a"]] <- list()
a
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
?toupper
?geom_boxplot
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
gsub("[()\\[\\]]", "", "", perl = TRUE)
gsub("[()\\[\\]]", "", NULL, perl = TRUE)
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
?ggplot2::theme
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
usethis::use_package("ggplot2")
devtools::load_all(".")
run_app()
package_version("comparat")
package_version()
packageVersion("comparat")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
a <- c(FALSE, TRUE, TRUE, FALSE)
gsub("TRUE", "sì", a)
a <- gsub("TRUE", "sì", a)
a <- gsub(FALSE, "no", a)
a
a <- gsub("pippo", "no", a)
a
a <- c(FALSE, TRUE, TRUE, FALSE)
a <- gsub("FALSE", "no", a)
a
rm(a)
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
?multissession
??multissession
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
a - letters[5]
a - letters[1:5]
a <- letters[1:5]
a
NULL %in% a
a
ifelse(NULL %in% a, "sì", "no")
ifelse("a" %in% a, "sì", "no")
ifelse(NULL %in% a, "sì", "no")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
promises::future_promise()
?promises::future_promise()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
usethis::use_test("app_server")
usethis::use_test("app_ui")
devtools::test_coverage()
devtools::load_all(".")
run_app()
library(comparat)
devtools::load_all(".")
usethis::use_version()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
usethis::use_version()
devtools::check()
rhub::check_for_cran()
usethis::use_package(bslib)
usethis::use_package("bslib")
usethis::use_package("devtools")
usethis::use_package("future")
usethis::use_package("promises")
usethis::use_package("rmarkdown")
usethis::use_package("shinyjs")
devtools::check()
rhub::check_for_cran()
test_check("comparat")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
devtools::load_all(".")
run_app()
golem::add_shinyserver_file()
profvis::profvis(run_app())
devtools::load_all(".")
profvis::profvis(run_app())
profvis::profvis(run_app())
run_app()
profvis::profvis(run_app())
profvis::profvis(comparat::run_app())
profvis::profvis(comparat::app())
profvis::profvis(app.R)
profvis::profvis({comparat::app()})
profvis::profvis({comparat::run_app()})
run_app()
devtools::load_all(".")
devtools::load_all(".")
install.packages(c("alphashape3d", "ape", "arrow", "batchtools", "BH", "BiasedUrn", "BiocManager", "blob", "broom", "cachem", "caret", "chron", "classInt", "cli", "clustermq", "collapse", "colorspace", "commonmark", "conquer", "dbplyr", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "epiR", "ergm", "evaluate", "extrafont", "fansi", "fastmap", "filehash", "flexmix", "flextable", "FNN", "fontawesome", "formatR", "fs", "future", "future.batchtools", "gam", "gapminder", "gargle", "gdtools", "geometry", "ggfortify", "ggmap", "ggplot2", "ggpp", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "gmp", "golem", "googledrive", "googlesheets4", "gsl", "haven", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "intervals", "ipred", "joineRML", "keras", "kernlab", "kit", "knitr", "lava", "lavaan", "leaflet", "lfe", "lm.beta", "lme4", "lpSolve", "lubridate", "metafor", "mockr", "modeldata", "modelr", "multcomp", "network", "nlme", "odbc", "officer", "openair", "openssl", "openxlsx", "packrat", "pak", "parallelly", "paws", "paws.analytics", "paws.application.integration", "paws.common", "paws.compute", "paws.cost.management", "paws.customer.engagement", "paws.database", "paws.developer.tools", "paws.end.user.computing", "paws.machine.learning", "paws.management", "paws.networking", "paws.security.identity", "paws.storage", "pbkrtest", "pillar", "pkgKitten", "pryr", "ps", "psych", "qs", "randtoolbox", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppTOML", "readr", "readxl", "recipes", "renv", "reticulate", "rgdal", "rgeos", "rgl", "rlang", "rmarkdown", "rms", "rngWELL", "robustbase", "RPostgres", "RPostgreSQL", "RSQLite", "rstatix", "Rttf2pt1", "sass", "scatterplot3d", "sets", "sf", "shinytest2", "simplermarkdown", "sna", "sourcetools", "sp", "spatialreg", "spData", "spdep", "spelling", "statnet.common", "styler", "survival", "systemfit", "targets", "terra", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "torch", "triebeard", "tseries", "unitizer", "vars", "vcd", "vctrs", "vdiffr", "VGAM", "vitae", "vroom", "wk", "xfun", "XML", "xts", "yaml"))
install.packages(c("alphashape3d", "ape", "arrow", "batchtools", "BH", "BiasedUrn", "BiocManager", "blob", "broom", "cachem", "caret", "chron", "classInt", "cli", "clustermq", "collapse", "colorspace", "commonmark", "conquer", "dbplyr", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "epiR", "ergm", "evaluate", "extrafont", "fansi", "fastmap", "filehash", "flexmix", "flextable", "FNN", "fontawesome", "formatR", "fs", "future", "future.batchtools", "gam", "gapminder", "gargle", "gdtools", "geometry", "ggfortify", "ggmap", "ggplot2", "ggpp", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "gmp", "golem", "googledrive", "googlesheets4", "gsl", "haven", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "intervals", "ipred", "joineRML", "keras", "kernlab", "kit", "knitr", "lava", "lavaan", "leaflet", "lfe", "lm.beta", "lme4", "lpSolve", "lubridate", "metafor", "mockr", "modeldata", "modelr", "multcomp", "network", "nlme", "odbc", "officer", "openair", "openssl", "openxlsx", "packrat", "pak", "parallelly", "paws", "paws.analytics", "paws.application.integration", "paws.common", "paws.compute", "paws.cost.management", "paws.customer.engagement", "paws.database", "paws.developer.tools", "paws.end.user.computing", "paws.machine.learning", "paws.management", "paws.networking", "paws.security.identity", "paws.storage", "pbkrtest", "pillar", "pkgKitten", "pryr", "ps", "psych", "qs", "randtoolbox", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppTOML", "readr", "readxl", "recipes", "renv", "reticulate", "rgdal", "rgeos", "rgl", "rlang", "rmarkdown", "rms", "rngWELL", "robustbase", "RPostgres", "RPostgreSQL", "RSQLite", "rstatix", "Rttf2pt1", "sass", "scatterplot3d", "sets", "sf", "shinytest2", "simplermarkdown", "sna", "sourcetools", "sp", "spatialreg", "spData", "spdep", "spelling", "statnet.common", "styler", "survival", "systemfit", "targets", "terra", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "torch", "triebeard", "tseries", "unitizer", "vars", "vcd", "vctrs", "vdiffr", "VGAM", "vitae", "vroom", "wk", "xfun", "XML", "xts", "yaml"))
install.packages(c("alphashape3d", "ape", "arrow", "batchtools", "BH", "BiasedUrn", "BiocManager", "blob", "broom", "cachem", "caret", "chron", "classInt", "cli", "clustermq", "collapse", "colorspace", "commonmark", "conquer", "dbplyr", "dplyr", "DT", "dtplyr", "e1071", "emmeans", "epiR", "ergm", "evaluate", "extrafont", "fansi", "fastmap", "filehash", "flexmix", "flextable", "FNN", "fontawesome", "formatR", "fs", "future", "future.batchtools", "gam", "gapminder", "gargle", "gdtools", "geometry", "ggfortify", "ggmap", "ggplot2", "ggpp", "ggpubr", "ggrepel", "ggsci", "gh", "glmnet", "gmp", "golem", "googledrive", "googlesheets4", "gsl", "haven", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "intervals", "ipred", "joineRML", "keras", "kernlab", "kit", "knitr", "lava", "lavaan", "leaflet", "lfe", "lm.beta", "lme4", "lpSolve", "lubridate", "metafor", "mockr", "modeldata", "modelr", "multcomp", "network", "nlme", "odbc", "officer", "openair", "openssl", "openxlsx", "packrat", "pak", "parallelly", "paws", "paws.analytics", "paws.application.integration", "paws.common", "paws.compute", "paws.cost.management", "paws.customer.engagement", "paws.database", "paws.developer.tools", "paws.end.user.computing", "paws.machine.learning", "paws.management", "paws.networking", "paws.security.identity", "paws.storage", "pbkrtest", "pillar", "pkgKitten", "pryr", "ps", "psych", "qs", "randtoolbox", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "RcppTOML", "readr", "readxl", "recipes", "renv", "reticulate", "rgdal", "rgeos", "rgl", "rlang", "rmarkdown", "rms", "rngWELL", "robustbase", "RPostgres", "RPostgreSQL", "RSQLite", "rstatix", "Rttf2pt1", "sass", "scatterplot3d", "sets", "sf", "shinytest2", "simplermarkdown", "sna", "sourcetools", "sp", "spatialreg", "spData", "spdep", "spelling", "statnet.common", "styler", "survival", "systemfit", "targets", "terra", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "torch", "triebeard", "tseries", "unitizer", "vars", "vcd", "vctrs", "vdiffr", "VGAM", "vitae", "vroom", "wk", "xfun", "XML", "xts", "yaml"))
library(comparat)
devtools::load_all(".")
run_app()
devtools::load_all(".")
devtools::load_all(".")
library(comparat)
globalVariables(c(".", "outlier"))
usethis::use_coverage()
?golem::with_golem_options
library(comparat)
devtools::load_all(".")
renv::init()
install.packages("covrpage")
install.packages("covrpage")
renv::init()
renv::snapshot()
renv::snapshot()
renv::snapshot()
renv::status()
renv::snapshot()
renv::snapshot(force = TRUE)
devtools::load_all(".")
run_app()
renv::settings$snapshot.type("all")
renv::snapshot()
renv::snapshot(force = TRUE)
renv::dependencies()
install.packages("markdown")
devtools::load_all(".")
run_app()
renv::dependencies()$Package
renv::dependencies()$Package %>% unique
renv::status()
renv::snapshot(force = TRUE)
library(comparat)
library(comparat)
renv::deactivate()
library(comparat)
install.packages(c("arrow", "car", "collapse", "epiR", "flextable", "ggplot2", "ggpp", "gstat", "gt", "hardhat", "interp", "Matrix", "prodlim", "ps", "quantmod", "RcppArmadillo", "renv", "RSQLite", "spacetime", "stars"))
runApp()
devtools::load_all(".")
runApp()
